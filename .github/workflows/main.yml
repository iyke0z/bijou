name: Deploy ngmkt FE App

on:
  push:
    branches:
      - main  # Run this workflow when changes are pushed to the main branch

jobs:
  build-and-deploy:
    name: Build and Deploy Vue.js App
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - subdomain: "24hrs"
            folder: "business_sites/24hrs"
          - subdomain: "flexglobalprime"
            folder: "business_sites/flexglobalprime"
          - subdomain: "munchiesevents"
            folder: "business_sites/munchiesevents"
          - subdomain: "dami"
            folder: "business_sites/dami"
          - subdomain: "crestgrandeur"
            folder: "business_sites/crestgrandeur"
          - subdomain: "lola"
            folder: "business_sites/lola"
          - subdomain: "mammanativekichen"
            folder: "business_sites/mammanativekichen"
          - subdomain: "alec"
            folder: "business_sites/alec"
          - subdomain: "churchboymerch"
            folder: "business_sites/churchboymerch"
          - subdomain: "edzain"
            folder: "business_sites/edzain"

      fail-fast: false  # Continue if one matrix job fails

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch Full Git History
        run: |
          # Fetch the full history to ensure the before commit is available
          git fetch --unshallow
          git fetch origin ${{ github.ref }}  # Fetch the specific branch (in case it's shallow)

      - name: Update .env File
        run: |
          echo "Updating .env for subdomain: ${{ matrix.subdomain }}"
          if [ ! -f .env ]; then
            echo "Error: .env file not found!"
            exit 1
          fi
          case "${{ matrix.subdomain }}" in
            "24hrs")
              API_URL="https://api.24hrs.ngmkt.site"
              ;;
            "flexglobalprime")
              API_URL="https://api.flexglobalprime.ngmkt.site"
              ;;
            "munchiesevents")
              API_URL="https://api.munchiesevents.ngmkt.site"
              ;;
            "dami")
              API_URL="https://api.dami.ngmkt.site"
              ;;
            "crestgrandeur")
              API_URL="https://api.crestgrandeur.ngmkt.site"
              ;;
            "lola")
              API_URL="https://api.lola.ngmkt.site"
              ;;
            "mammanativekichen")
              API_URL="https://api.mammanativekichen.ngmkt.site"
              ;;
            "alec")
              API_URL="https://api.alec.ngmkt.site"
              ;;
            "churchboymerch")
              API_URL="https://api.churchboymerch.ngmkt.site"
              ;;
            "edzain")
              API_URL="https://api.edzain.ngmkt.site"
              ;;
            "eloka")
              API_URL="https://api.eloka.ngmkt.site"
              ;;
            *)
              echo "Unknown subdomain!"
              exit 1
              ;;
          esac
          # Replace URLs in .env file
          sed -i 's|VUE_APP_API_BASE_URL="http://localhost:9009/api/v1"|VUE_APP_API_BASE_URL="'$API_URL'/api/v1"|' .env
          sed -i 's|VUE_APP_STORAGE_PATH="http://localhost:9009/images/product"|VUE_APP_STORAGE_PATH="'$API_URL'/images/product"|' .env
          sed -i 's|VUE_APP_STORAGE="http://localhost:9009/storage"|VUE_APP_STORAGE="'$API_URL'/storage"|' .env
          echo "Updated .env:"
          cat .env

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.18.1'

      - name: Replace baseURL in Api.js
        run: |
          echo "Updating API URL for subdomain: ${{ matrix.subdomain }}"
          case "${{ matrix.subdomain }}" in
            "24hrs")
              API_URL="https://api.24hrs.ngmkt.site"
              ;;
            "flexglobalprime")
              API_URL="https://api.flexglobalprime.ngmkt.site"
              ;;
            "munchiesevents")
              API_URL="https://api.munchiesevents.ngmkt.site"
              ;;
            "dami")
              API_URL="https://api.dami.ngmkt.site"
              ;;
            "crestgrandeur")
              API_URL="https://api.crestgrandeur.ngmkt.site"
              ;;
            "lola")
              API_URL="https://api.lola.ngmkt.site"
              ;;
            "mammanativekichen")
              API_URL="https://api.mammanativekichen.ngmkt.site"
              ;;
            "alec")
              API_URL="https://api.alec.ngmkt.site"
              ;;
            "churchboymerch")
              API_URL="https://api.churchboymerch.ngmkt.site"
              ;;
            "edzain")
              API_URL="https://api.edzain.ngmkt.site"
              ;;
            "eloka")
              API_URL="https://api.eloka.ngmkt.site"
              ;;
            *)
              echo "Unknown subdomain!"
              exit 1
              ;;
          esac
          # Replace the base URL in Api.js file
          sed -i "s|http://localhost:9009/api/v1|$API_URL/api/v1|" ./src/javascript/Api/Api.js

      - name: Install Dependencies
        run: npm install

      - name: Build Application
        run: npm run build

      - name: Upload Built Files via SCP
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 22  # SCP over SSH
          source: dist  # Local directory to upload
          target: ${{ secrets.FTP_PATH }}/${{ matrix.folder }}/frontend/  # Remote directory based on subdomain

      - name: Run Post-Deployment Commands
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 22  # SSH port
          script: |
            # Check and print the current working directory
            echo "Current working directory: $(pwd)"
            
            # Navigate to the target directory based on the subdomain
            cd "www/${{ matrix.folder }}/frontend" || { echo "Target directory does not exist"; exit 1; }

            # Verify that we are in the correct directory
            echo "Changed to directory: $(pwd)"

            # List the files in the directory for debugging purposes
            echo "Files in the current directory:"
            ls -la || { echo "Error: Failed to list files"; exit 1; }

            # Check if the dist folder exists before proceeding
            if [ -d dist ]; then
              # Change into the dist folder
              cd dist || { echo "Error: Failed to enter dist directory"; exit 1; }

              # Copy the built files to the parent directory
              cp -r * ../ || { echo "Error: Failed to copy files"; exit 1; }

              # Return to the public directory
              cd .. || { echo "Error: Failed to return to public directory"; exit 1; }

              # Remove the dist folder
              rm -rf dist || { echo "Error: Failed to remove dist folder"; exit 1; }
            else
              echo "Error: dist folder does not exist in $(pwd); exiting to avoid unintended deletion."
              exit 1
            fi