name: Deploy ngmkt FE App

on:
  push:
    branches:
      - main  # Run this workflow when changes are pushed to the main branch

jobs:
  build-and-deploy:
    name: Build and Deploy Vue.js App
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - subdomain: "edzain"
            folder: "business_sites/edzain"
          - subdomain: "bingoml"
            folder: "business_sites/bingoml"
          - subdomain: "aromaperk"
            folder: "business_sites/aromaperk"
          - subdomain: "phlorah"
            folder: "business_sites/phlorah"
          - subdomain: "fitandfeet"
            folder: "business_sites/fitandfeet"
          - subdomain: "totech"
            folder: "business_sites/totech"
          - subdomain: "chosenconcept"
            folder: "business_sites/chosenconcept"
          - subdomain: "amasemporium"
            folder: "business_sites/amasemporium"

      fail-fast: false  # Continue if one matrix job fails

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch Full Git History
        run: |
          # Fetch the full history to ensure the before commit is available
          git fetch --unshallow
          git fetch origin ${{ github.ref }}  # Fetch the specific branch (in case it's shallow)
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.18.1'

      # - name: Check if subdomain folder has changed
      #   id: check_changes
      #   run: |
      #     echo "Checking if files in the ${{ matrix.folder }} folder have changed..."

      #     # Ensure we're using the correct commit references for diff
      #     echo "Using commit range: ${{ github.event.before }}..${{ github.sha }}"

      #     # Get the list of changed files between the previous and current commit
      #     changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

      #     # Check if any files in the specific subdomain folder have changed
      #     if echo "$changed_files" | grep -q "^${{ matrix.folder }}/"; then
      #       echo "Changes detected in the ${{ matrix.folder }} folder. Proceeding with deployment."
      #       echo "deploy=true" >> $GITHUB_ENV
      #     else
      #       echo "No changes detected in the ${{ matrix.folder }} folder. Skipping deployment."
      #       echo "deploy=false" >> $GITHUB_ENV
      #     fi

      # Step 4: Replace baseURL in Api.js with the subdomain's API URL (Only if the folder changed)
      - name: Replace baseURL in Api.js
        if: env.deploy == 'true'
        run: |
          echo "Updating API URL for subdomain: ${{ matrix.subdomain }}"
          case "${{ matrix.subdomain }}" in
            "edzain")
              API_URL="https://api.edzain.ngmkt.site"
              ;;
            "bingoml")
              API_URL="https://api.bingoml.ngmkt.site"
              ;;
            "phlorah")
              API_URL="https://api.phlorah.ngmkt.site"
              ;;
            "aromaperk")
              API_URL="https://api.aromaperk.ngmkt.site"
              ;;
            "chosenconcept")
              API_URL="https://api.chosenconcept.ngmkt.site"
              ;;
            "fitandfeet")
              API_URL="https://api.fitandfeet.ngmkt.site"
              ;;
            "totech")
              API_URL="https://api.totech.ngmkt.site"
              ;;
            "amasemporium")
              API_URL="https://api.amasemporium.ngmkt.site"
              ;;
            *)
              echo "Unknown subdomain!"
              exit 1
              ;;
          esac

          # Replace the base URL in Api.js file
          sed -i "s|http://localhost:9009/api/v1|$API_URL/api/v1|" ./src/javascript/Api/Api.js

      # Step 5: Install dependencies (Only if the folder changed)
      - name: Install Dependencies
        if: env.deploy == 'true'
        run: npm install

      # Step 6: Build the Vue.js app (Only if the folder changed)
      - name: Build Application
        if: env.deploy == 'true'
        run: npm run build

      # Step 7: Upload Built Files via SCP (Only if the folder changed)
      - name: Upload Built Files via SCP
        if: env.deploy == 'true'
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 22  # SCP over SSH
          source: dist  # Local directory to upload
          target: ${{ secrets.FTP_PATH }}/${{ matrix.folder }}/frontend/  # Remote directory based on subdomain

      # Step 8: Run Post-Deployment Commands (Only if the folder changed)
      - name: Run Post-Deployment Commands
        if: env.deploy == 'true'
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 22  # SSH port
          script: |
            # Check and print the current working directory
            echo "Current working directory: $(pwd)"
            
            # Navigate to the target directory based on the subdomain
            cd "www/${{ matrix.folder }}/frontend" || { echo "Target directory does not exist"; exit 1; }

            # Verify that we are in the correct directory
            echo "Changed to directory: $(pwd)"

            # List the files in the directory for debugging purposes
            echo "Files in the current directory:"
            ls -la || { echo "Error: Failed to list files"; exit 1; }

            # Check if the dist folder exists before proceeding
            if [ -d dist ]; then
              # Change into the dist folder
              cd dist || { echo "Error: Failed to enter dist directory"; exit 1; }

              # Copy the built files to the parent directory
              cp -r * ../ || { echo "Error: Failed to copy files"; exit 1; }

              # Return to the public directory
              cd .. || { echo "Error: Failed to return to public directory"; exit 1; }

              # Remove the dist folder
              rm -rf dist || { echo "Error: Failed to remove dist folder"; exit 1; }
            else
              echo "Error: dist folder does not exist in $(pwd); exiting to avoid unintended deletion."
              exit 1
            fi
